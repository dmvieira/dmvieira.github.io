<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Diogo Munaro Vieira</title><link>http://diogomunaro.com/</link><description>Because Programming is Cool and IT needs simplicity</description><atom:link href="http://diogomunaro.com/feeds/diogo-munaro.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 06 Feb 2015 17:27:00 -0200</lastBuildDate><item><title>Changing dynamically Pentaho report databases using Python script</title><link>http://diogomunaro.com/changing-dynamically-pentaho-report-databases-using-python-script.html</link><description>
        &lt;p&gt;
            Please, wait release date ^^
        &lt;/p&gt;
    </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Diogo Munaro</dc:creator><pubDate>Fri, 06 Feb 2015 17:27:00 -0200</pubDate><guid>tag:diogomunaro.com,2015-02-06:changing-dynamically-pentaho-report-databases-using-python-script.html</guid><category>pentaho</category><category>python</category><category>java</category><category>databases</category><category>report design</category><category>pdi</category></item><item><title>Using Pelican, Github, Parse, Sendgrid and Disqus to make your free website.</title><link>http://diogomunaro.com/using-pelican-github-parse-sendgrid-and-disqus-to-make-your-free-website.html</link><description>
        &lt;h3&gt;
            What?? My free website?
        &lt;/h3&gt;
        &lt;p&gt;
            Yeah! You don't need to pay for a simple website or for your portfolio. I
            did this website totally free (I just need to pay about 10 dollars
            yearly for my domain).
        &lt;/p&gt;
        &lt;p&gt;
            It's really strange because people (mainly IT people) love databases
            and dynamic content with a lot of complexity. So, I'm here to change
            your mind. SOMETIMES YOU DON'T NEED COMPLEXITY IN YOU LIFE! Databases and
            dynamic content are really powerful tools, but they allow some bugs
            and concerns that you don't want when you are building a simple website.
        &lt;/p&gt;
        &lt;h3&gt;
            Going back to your caves.
        &lt;/h3&gt;
        &lt;img alt="Caveman" src="/images/caveman.jpg" /&gt;
        &lt;p&gt;
            What you will see right now is a transgression to all technology
            enforces and a new way of seeing this technology.
        &lt;/p&gt;
        &lt;p&gt;
            When you make your personal blog or website with a tool like
            &lt;a target="_blank" href="https://wordpress.org/"&gt;Wordpress&lt;/a&gt;, you
            are saying to the world: "I need to spend money!".
            &lt;a target="_blank" href="https://wordpress.org/"&gt;Wordpress&lt;/a&gt; is an
            amazing tool, but using it to make your personal blog is like kill an
            ant with a bazooka. You're using 0.1% of &lt;a target="_blank" href="https://wordpress.org/"&gt;Wordpress&lt;/a&gt;
            and you did a giant infrastructure for it.
        &lt;/p&gt;
        &lt;p&gt;
            Let's compare it with
            &lt;a target="_blank" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;.
            &lt;a target="_blank" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; is a
            service of &lt;a target="_blank" href="https://github.com/"&gt;Github&lt;/a&gt; where
            you can host static pages for your projects, for you and for your organizations for free.
            Every developer should open an account at &lt;a target="_blank" href="https://github.com/"&gt;Github&lt;/a&gt;
            because it's a spectacular collaboration environment.
            &lt;a target="_blank" href="https://help.github.com/categories/github-pages-basics/"&gt;Here&lt;/a&gt; is a tutorial to
            put your domain linked to &lt;a target="_blank" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;
            Ok, ok, I can host a static page, but... I need a blog, and contact form.
            How can I do that? So, if you think, every dynamic page displays static pages
            dynamically. Static pages were "Rock Stars" twenty years ago and now
            people don't mind them... I'll try to convince you that static pages
            are cool!
        &lt;/p&gt;
        &lt;h3&gt;
            Doing your "Rock Star" static page website
        &lt;/h3&gt;
        &lt;p&gt;
            What do you want in your page? I can describe some essential items:
        &lt;/p&gt;
        &lt;ul&gt;
            &lt;li&gt;
                Static pages (About, Projects, ...)
            &lt;/li&gt;
            &lt;li&gt;
                Blog feature, where I can post and people can comment
            &lt;/li&gt;
            &lt;li&gt;
                Contact Form
            &lt;/li&gt;
        &lt;/ul&gt;
        &lt;h4&gt;
            Static Pages
        &lt;/h4&gt;
        &lt;p&gt;
            Do I really need to explain it? Just do static pages and publish them!
        &lt;/p&gt;
        &lt;h4&gt;
            Blog
        &lt;/h4&gt;
        &lt;p&gt;
            Now the best tool ever! &lt;a target="_blank" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;
            recommends &lt;a target="_blank" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, but I'm a
            Pythonist (who loves Python) and I'm doing my website with a similar (I think it better) tool
            called &lt;a target="_blank" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;!
        &lt;/p&gt;
        &lt;p&gt;
            With these tools you can build a static website with configuration files
            and with Python power to generate these sites! With &lt;a target="_blank" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;
            you can do a blog!! Yeah, a simple blog that you can write using
            reStructuredText, Markdown, AsciiDoc formats or HTML. I'll not show how
            to work with &lt;a target="_blank" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, but
            there are some good pages that explain it:
            &lt;a target="_blank" href="http://fjavieralba.com/pelican-a-static-blog-generator-for-pythonistas.html"&gt;here&lt;/a&gt;,
            &lt;a target="_blank" href="http://hackercodex.com/guide/pelican-static-site-generator-install/"&gt;here&lt;/a&gt; and
            &lt;a target="_blank" href="http://docs.getpelican.com/en/latest/quickstart.html"&gt;here&lt;/a&gt;.
        &lt;/p&gt;
        &lt;h5&gt;Ok, ok, and my blog comments?&lt;/h5&gt;
        &lt;p&gt;
            &lt;a target="_blank" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; have a lot of
            &lt;a target="_blank" href="https://github.com/getpelican/pelican-plugins"&gt;plugins&lt;/a&gt;, and
            you can handle &lt;a target="_blank" href="https://github.com/getpelican/pelican-plugins/tree/master/static_comments"&gt;static comments&lt;/a&gt;
            or use &lt;a target="_blank" href="https://disqus.com/"&gt;Disqus&lt;/a&gt;. &lt;a target="_blank" href="https://disqus.com/"&gt;Disqus&lt;/a&gt; is
            a community of comments and you can get more information about people that comment in your website.
            For the most of cases it's free and &lt;a target="_blank" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;
            support integration with it, as explained in this &lt;a target="_blank" href="http://querbalken.net/howto-setup-comments-with-disqus-in-pelican-en.html"&gt;post&lt;/a&gt;.
        &lt;/p&gt;
        &lt;h4&gt;
            Contact Form and everything dynamic that you need...
        &lt;/h4&gt;
        &lt;p&gt;
            No, I'm not crazy... Not yet... I'm talking about dynamic things in static pages...
        &lt;/p&gt;
        &lt;p&gt;
            Now your website will send emails from contact form (and can do every
            dynamic things that your need) using
            &lt;a target="_blank" href="https://parse.com/"&gt;Parse&lt;/a&gt;. You can do almost
            everything that you do in your dynamic server using &lt;a target="_blank" href="https://parse.com/"&gt;Parse&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;
            &lt;a target="_blank" href="https://parse.com/"&gt;Parse&lt;/a&gt; is like a server-side for you!
            You configure a script for server side and make requests for that script.
            If you use more than 30 requests per second, than you will pay. Yes, you deserve
            pay if you do that! With my contact form I receive less than one email per year,
            so I should never pay...
        &lt;/p&gt;
        &lt;p&gt; Then you will think... Ohhh, but I need to learn one more tool... Not really,
            because &lt;a target="_blank" href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt; is another
            amazing tool that take care of everything to you! &lt;a target="_blank" href="https://sendgrid.com/"&gt;SendGrid&lt;/a&gt;
            sends optimized emails and store information about receipts, links clicked and you can
            make templates and email lists. Yes, a good tool with a great &lt;a target="_blank" href="https://sendgrid.com/blog/send-email-static-websites-using-parse/"&gt;tutorial&lt;/a&gt;
            that your REALLY just need to copy and paste to integrate with &lt;a target="_blank" href="https://parse.com/"&gt;Parse&lt;/a&gt; and use in
            your contact form.
        &lt;/p&gt;
        &lt;h3&gt;
            Final Remarks
        &lt;/h3&gt;
        &lt;p&gt;
            I hope that I was able to convince you about the power of static pages right now.
            Nowadays we have a lot of tools and integrations that we just need to join these tools
            and make a simpler thing. Here we show how to do a static website and host these
            pages without cost. If you want to see some website implemented using these
            technologies you can view my site &lt;a target="_blank" href="https://github.com/dmvieira/dmvieira.github.io"&gt;source code&lt;/a&gt;.
        &lt;/p&gt;
        &lt;p&gt;
            PS: Now your website is with automatic deploy and with version control because you're using GIT!! ;)
        &lt;/p&gt;
    </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Diogo Munaro</dc:creator><pubDate>Fri, 23 Jan 2015 17:27:00 -0200</pubDate><guid>tag:diogomunaro.com,2015-01-23:using-pelican-github-parse-sendgrid-and-disqus-to-make-your-free-website.html</guid><category>pelican</category><category>github</category><category>sendgrid</category><category>disqus</category><category>website</category><category>python</category><category>parse</category><category>free</category><category>tutorial</category></item><item><title>Using PyHeaderFile to handle sheets</title><link>http://diogomunaro.com/using-pyheaderfile-to-handle-sheets.html</link><description>
        &lt;h3&gt;
            Why working with Spreadsheets?
        &lt;/h3&gt;
        &lt;p&gt;
            Spreadsheets are a 'proxy' between users and developers. With them,
            users can input data and organize things then send as input to
            systems, while programmers can handle these sheets and import or
            export from database for users.
        &lt;/p&gt;
        &lt;p&gt;
            Some good ways for users to handle spreadsheets are using Excel,
            Libreoffice, Google Drive and others. For the user is really simple
            to open a lot of formats and different extensions because these
            programs already do all hard work, but nobody take care of programmers
            (specially Python programmers)...
            We need to use a lot of difficult modules and find a way to read every
            strange spreadsheet format.
        &lt;/p&gt;
        &lt;h3&gt;
            Why Python programmers can relax right now.
        &lt;/h3&gt;
        &lt;p&gt;
            Yes, now Python community earned a module called
            &lt;a target="_blank" href="https://pypi.python.org/pypi/pyheaderfile"&gt;PyHeaderFile&lt;/a&gt;!
            PyHeaderFile is an interface to handle sheets. No, not spreadsheets, but only
            sheets. Example of libreoffice sheet:
        &lt;/p&gt;

            &lt;img alt="libreoffice sheet" src="/images/sheet.png" /&gt;
        &lt;h3&gt;
            But why Sheets?
        &lt;/h3&gt;
        &lt;p&gt;
            Sheets are beautiful! Spreadsheets are ugly... Spreadsheets add a lot of complexity
            when we handle it using &lt;a target="_blank" href="https://pypi.python.org/pypi/xlrd"&gt;Xlrd&lt;/a&gt;,
            &lt;a target="_blank" href="https://pypi.python.org/pypi/xlwt"&gt;Xlwt&lt;/a&gt;,
            &lt;a target="_blank" href="https://pypi.python.org/pypi/openpyxl"&gt;Openpyxl&lt;/a&gt;,
            &lt;a href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt; or even Python CSV (comma separated values)
            default module, but users usually use something different from commas to separate information in
            what I like to call as GWSV (guess what separated values).
            So you need to tell user: "send me in that format or I will kill you!"...
        &lt;/p&gt;
        &lt;p&gt;
            I remember when Microsoft changed default format from XLS to XLSX. The number of
            systems crashing because people don't know that extension and
            the number of help desk problems was (and continue) huge! So why not handle sheets
            as an easy way to programmer? The better approach is using sheets, because a
            CSV sheet can be handled exactly equal to XLS or XLSX or ODS sheet.

        &lt;/p&gt;
        &lt;p&gt;
            The main difference between sheets is style (programmers hate sheet styles, but users love), but programmers
            love simple data, not styles, colors, etc. By now &lt;a target="_blank" href="https://pypi.python.org/pypi/pyheaderfile"&gt;PyHeaderFile&lt;/a&gt;
            can easily open CSV, XLS, XLSX files and convert between them (only data, no styles!). With &lt;a target="_blank" href="https://pypi.python.org/pypi/pyheaderfile"&gt;PyHeaderFile&lt;/a&gt;
            you can open even physical files or memory files and convert between them too!
        &lt;/p&gt;
        &lt;p&gt;
            The only thing that users and programmers agree is that files are easier handled
            with a header. So, if:

            &lt;pre&gt;
                Name, Date, Number

                Diogo, 1989-08-12, 7

                Vivi, 1990-05-31, 27
            &lt;/pre&gt;
            Users and programmers feel happy. If a file have a header you can handle this file with
            &lt;a target="_blank" href="https://pypi.python.org/pypi/pyheaderfile"&gt;PyHeaderFile&lt;/a&gt;!
        &lt;/p&gt;
        &lt;h3&gt;
            Why are you waiting?
        &lt;/h3&gt;
        &lt;p&gt;
            Go and use &lt;a target="_blank" href="https://pypi.python.org/pypi/pyheaderfile"&gt;PyHeaderFile&lt;/a&gt;. You can
            collaborate with the project in &lt;a target="_blank" href="https://github.com/kappius/pyheaderfile"&gt;GitHub&lt;/a&gt;.
            I hope you enjoy!
        &lt;/p&gt;
    </description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Diogo Munaro</dc:creator><pubDate>Fri, 09 Jan 2015 17:27:00 -0200</pubDate><guid>tag:diogomunaro.com,2015-01-09:using-pyheaderfile-to-handle-sheets.html</guid><category>xls</category><category>xlsx</category><category>csv</category><category>excel</category><category>libreoffice</category><category>python</category><category>module</category><category>stylesheet</category></item></channel></rss>